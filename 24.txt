// Q1 Print the type of file where filename accepted through command line

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>

int main(int argc, char *argv[])
{
    struct stat fileInfo;

   
    if (argc != 2) {
        printf("Enter file name");
        scanf("%s",argv[1]);
    }

  
    if (stat(argv[1], &fileInfo) == -1) {
        perror("stat error");
        return 1;
    }

    if (S_ISREG(fileInfo.st_mode)) {
        printf("The file '%s' is a regular file.\n", argv[1]);
    } else if (S_ISDIR(fileInfo.st_mode)) {
        printf("The file '%s' is a directory.\n", argv[1]);
    } else if (S_ISCHR(fileInfo.st_mode)) {
        printf("The file '%s' is a character device.\n", argv[1]);
    } else if (S_ISBLK(fileInfo.st_mode)) {
        printf("The file '%s' is a block device.\n", argv[1]);
    } else if (S_ISFIFO(fileInfo.st_mode)) {
        printf("The file '%s' is a FIFO (named pipe).\n", argv[1]);
    } else if (S_ISLNK(fileInfo.st_mode)) {
        printf("The file '%s' is a symbolic link.\n", argv[1]);
    } else if (S_ISSOCK(fileInfo.st_mode)) {
        printf("The file '%s' is a socket.\n", argv[1]);
    } else {
        printf("The file '%s' is of an unknown type.\n", argv[1]);
    }

    return 0;
}







/*Q2 Write a C program which creates a child 
process to run linux/ unix command or any user 
defined program. The parent process set the 
signal handler for death of child signal and 
Alarm signal. If a child process does not 
complete its execution in 5 second then parent 
process kills child process.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

void childDeathHandler(int signum) {
    printf("Child process terminated.\n");
    exit(0); // Exit the program
}

void alarmHandler(int signum) {
    printf("Child process exceeded time limit. Killing it...\n");
    exit(1); 
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <command or program> [args...]\n", argv[0]);
        return 1;
    }

    pid_t pid;
    int status;

   
    signal(SIGCHLD, childDeathHandler);
    signal(SIGALRM, alarmHandler);

    pid = fork();
    if (pid < 0) {
        perror("fork failed");
        return 1;
    } else if (pid == 0) {
        
        execvp(argv[1], &argv[1]);
        perror("child process execution failed");
        exit(1);
    } else {
       
        alarm(5); 

        if (waitpid(pid, &status, 0) == -1) {
            perror("wait for child process failed");
            return 1;
        }

        alarm(0);

        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        } else {
            printf("Child process did not exit normally.\n");
        }
    }

    return 0;
}


