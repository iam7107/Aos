//Q1 Generate parent process to write unnamed pipe and will read from it

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {

    int pipefds[2];

    pid_t pid;

    char buf[20];

    if (pipe(pipefds) == -1) {

        perror("pipe");

        exit(EXIT_FAILURE);

    }

    pid = fork();

    if (pid == -1) {

        perror("fork");

        exit(EXIT_FAILURE);

    }

    if (pid == 0) { 

        close(pipefds[1]); 

        read(pipefds[0], buf, sizeof(buf)); 

        printf("Child read: %s\n", buf); 

        close(pipefds[0]); 

    } else { 

        close(pipefds[0]); 

        write(pipefds[1], "Hello from parent", 18); 

        close(pipefds[1]); 

    }
    return 0;
}





/*Q2 Write a C program to Identify the type (Directory, character device, Block device, Regular file,
FIFO or pipe, symbolic link or socket) of given file using stat() system call.*/

#include<stdio.h>
#include<string.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<unistd.h>

int main()
{
	int fd;
	char  *myfifo = "/tmp/myfifo"; 
	mkfifo(myfifo,0666);    
	char arr1[80],arr2[80];
	while(1);
	{
		fd = open(myfifo,O_WRONLY);
		
		fgets(arr2,80,stdin);
		
		write(fd,arr2,strlen(arr2)+1);
		close(fd);

		fd = open(myfifo,O_RDONLY)
	}
} 

