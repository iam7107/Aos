//Q1 Write a C program that print the exit status of a terminated child process

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t child_pid, wpid;
    int status;

    child_pid = fork();

    if (child_pid == 0) {
        
        printf("Child process (PID: %d) is running.\n", getpid());
        sleep(2);
        exit(50); 
    } 
    else if (child_pid > 0) {
        
        printf("Parent process (PID: %d) is waiting for the child to terminate.\n", getpid());

        wpid = wait(&status); 

        if (wpid == -1) {
            perror("wait");
            exit(1);
        }

       
        if (WIFEXITED(status)) {
            printf("Child process (PID: %d) exited with status: %d\n", wpid, WEXITSTATUS(status));
        } else {
            printf("Child process (PID: %d) did not exit normally.\n", wpid);
        }
    } 
    else {
        
        perror("fork");
        exit(1);
    }

    return 0;
}







//Q2  Write a program which receives filename as command line argument and display filenames in ascending order according to their sizes

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/stat.h>
#include<time.h>
#include<pwd.h>
#include<grp.h>
#include<dirent.h>
#include<unistd.h>

struct fileinfo
{
	char filename[20];
	int size;
}files[20],temp;


int main(int argc,char *argv[])
{
	struct stat s;
	memset(&s,0,sizeof(s));
	int i,j,n;
	for(i=1;i<argc;i++)
	{
		printf("\n");
		stat(argv[i],&s);
		strcpy(files[i-1].fileName,argv[i]);
		files[i-1].size = s.st_size;
	}
	n = i-1;
	for(i=0;i<n;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(files[i].size > files[j].size)
			{
				temp=files[i];
				files[i] = files[j];
				files[j] = temp;
			}
		}
	}
	for(i=0;i<n;i++)
		printf("\n%s\t%d",files[i].fileName,files[i],size);
	return 0;
}