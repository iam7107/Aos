/*Q1 Display all the files from current directory whose size is greater than n Bytes Where n is accept from user . */

#include <stdio.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>
#include <stdlib.h>

int main() {
    char *directory = ".";  
    int n;
    

    printf("Enter the size threshold in bytes: ");
    scanf("%d", &n);


    DIR *dir = opendir(directory);
    if (dir == NULL) {
        perror("Unable to open directory");
        return 1;
    }

    struct dirent *entry;
    struct stat fileStat;
    char filepath[512];

    printf("Files larger than %d bytes:\n", n);
    

    while ((entry = readdir(dir)) != NULL) {

        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }


        snprintf(filepath, sizeof(filepath), "%s/%s", directory, entry->d_name);


        if (stat(filepath, &fileStat) == 0) {

            if (S_ISREG(fileStat.st_mode) && fileStat.st_size > n) {
                printf("%s (%lld bytes)\n", entry->d_name, (long long)fileStat.st_size);
            }
        } else {
            perror("stat");
        }
    }


    closedir(dir);

    return 0;
}








/* Q2 Write a C program which creates a child 
process to run linux/ unix command or any user 
defined program. The parent process set the 
signal handler for death of child signal and 
Alarm signal. If a child process does not 
complete its execution in 5 second then parent 
process kills child process.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

void childDeathHandler(int signum) {
    printf("Child process terminated.\n");
    exit(0); // Exit the program
}

void alarmHandler(int signum) {
    printf("Child process exceeded time limit. Killing it...\n");
    exit(1); 
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <command or program> [args...]\n", argv[0]);
        return 1;
    }

    pid_t pid;
    int status;

   
    signal(SIGCHLD, childDeathHandler);
    signal(SIGALRM, alarmHandler);

    pid = fork();
    if (pid < 0) {
        perror("fork failed");
        return 1;
    } else if (pid == 0) {
        
        execvp(argv[1], &argv[1]);
        perror("child process execution failed");
        exit(1);
    } else {
       
        alarm(5); 

        if (waitpid(pid, &status, 0) == -1) {
            perror("wait for child process failed");
            return 1;
        }

        alarm(0);

        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        } else {
            printf("Child process did not exit normally.\n");
        }
    }

    return 0;
}

