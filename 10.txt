//Q1  Write a program that illustrates how to execute two commands concurrently with a pipe

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    pid_t child_pid;

    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        
        close(pipefd[1]);  
        dup2(pipefd[0], STDIN_FILENO); 
        close(pipefd[0]);  
        execlp("grep", "grep", "c", NULL);
        perror("execlp");
        exit(EXIT_FAILURE);
    } else {

        close(pipefd[0]);  
        dup2(pipefd[1], STDOUT_FILENO);  
        close(pipefd[1]);  
        execlp("ls", "ls", NULL);
        perror("execlp");
        exit(EXIT_FAILURE);
    }
    return 0;
}









/* Q2 Generate parent process to write unnamed pipe and will write into it. Also generate child 
process which will read from pipe*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 100

int main() {
    int pipe_fd[2]; 
    pid_t pid;
    char write_msg[] = "Hello from parent!";
    char read_msg[BUFFER_SIZE];

    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }
    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid > 0) {  
        close(pipe_fd[0]);
        write(pipe_fd[1], write_msg, strlen(write_msg) + 1);

        close(pipe_fd[1]);
        wait(NULL);
    } else {  
        close(pipe_fd[1]);

        read(pipe_fd[0], read_msg, BUFFER_SIZE);

        printf("Child received: %s\n", read_msg);

        close(pipe_fd[0]);

        exit(EXIT_SUCCESS);
    }

    return 0;
}

