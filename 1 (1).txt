// Q1 Take multiple files as command line argument and print their inode number

#include<stdlib.h>
#include<string.h>
#include<stdio.h>

main(int argc,char*argv[])
{
	char d[100];
	if(argc<2)
	{
		printf("Invalid no. of inputs. Enter atleast one file");
		return 1;
	}
	for(int i = 1 ; i < argc;i++)
	{
		bzero(d,sizeof(d));
		strcat(d,"ls ");
		strcat(d,"-i ");
		strcat(d,argv[1]);
		system(d);
	}

    
    if (stat(argv[1], &fileInfo) == -1) {
        perror("stat error");
        return 1;
    }

    
    if (S_ISREG(fileInfo.st_mode)) {
        printf("The file '%s' is a regular file.\n", argv[1]);
    } else if (S_ISDIR(fileInfo.st_mode)) {
        printf("The file '%s' is a directory.\n", argv[1]);
    } else if (S_ISCHR(fileInfo.st_mode)) {
        printf("The file '%s' is a character device.\n", argv[1]);
    } else if (S_ISBLK(fileInfo.st_mode)) {
        printf("The file '%s' is a block device.\n", argv[1]);
    } else if (S_ISFIFO(fileInfo.st_mode)) {
        printf("The file '%s' is a FIFO (named pipe).\n", argv[1]);
    } else if (S_ISLNK(fileInfo.st_mode)) {
        printf("The file '%s' is a symbolic link.\n", argv[1]);
    } else if (S_ISSOCK(fileInfo.st_mode)) {
        printf("The file '%s' is a socket.\n", argv[1]);
    } else {
        printf("The file '%s' is of an unknown type.\n", argv[1]);
    }

}

int main(int argc, char *argv[])
{
    struct stat fileInfo;

   
    if (argc != 2) {
        printf("Enter file name");
        scanf("%s",argv[1]);
    }

  
    if (stat(argv[1], &fileInfo) == -1) {
        perror("stat error");
        return 1;
    }

    if (S_ISREG(fileInfo.st_mode)) {
        printf("The file '%s' is a regular file.\n", argv[1]);
    } else if (S_ISDIR(fileInfo.st_mode)) {
        printf("The file '%s' is a directory.\n", argv[1]);
    } else if (S_ISCHR(fileInfo.st_mode)) {
        printf("The file '%s' is a character device.\n", argv[1]);
    } else if (S_ISBLK(fileInfo.st_mode)) {
        printf("The file '%s' is a block device.\n", argv[1]);
    } else if (S_ISFIFO(fileInfo.st_mode)) {
        printf("The file '%s' is a FIFO (named pipe).\n", argv[1]);
    } else if (S_ISLNK(fileInfo.st_mode)) {
        printf("The file '%s' is a symbolic link.\n", argv[1]);
    } else if (S_ISSOCK(fileInfo.st_mode)) {
        printf("The file '%s' is a socket.\n", argv[1]);
    } else {
        printf("The file '%s' is of an unknown type.\n", argv[1]);
    }

    return 0;
}






/* Q2 Write a C program to send SIGALRM signal by child process to parent process and parent process make a provision to catch the signal 
and display alarm is fired.(Use Kill, fork, signal and sleep system call) */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>


void alarm_handler(int signum) {
    if (signum == SIGALRM) {
        printf("Alarm is fired\n");
        exit(0);  
    }
}

int main() {
    pid_t child_pid;
    int status;

    signal(SIGALRM, alarm_handler);

   
    child_pid = fork();

    if (child_pid < 0) {
        perror("Fork Failed");
        exit(1);
    }

    if (child_pid == 0) {  
        sleep(2);  
        kill(getppid(), SIGALRM); 
        exit(0); 
    } else {  
        printf("Parent process (PID: %d) waiting for the alarm...\n", getpid());

       
        while (1) {
            sleep(1);
        }
    }

    return 0;
}




